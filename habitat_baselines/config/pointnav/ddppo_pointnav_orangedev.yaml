BASE_TASK_CONFIG_PATH: "configs/tasks/pointnav_orangedev.yaml"
TRAINER_NAME: "ddppo"
ENV_NAME: "NavRLEnv"
SIMULATOR_GPU_ID: 0
TORCH_GPU_ID: 0
NUM_UPDATES: 10000
LOG_INTERVAL: 10
CHECKPOINT_INTERVAL: 100 # 50
LOAD_LAST_CHECKPOINT: True # resume training from last checkpoint
CHECKPOINT_FOLDER: "data/orangedev_checkpoints"
NUM_PROCESSES: 4 # 4
SENSORS: ["RGB_SENSOR"] #["RGB_SENSOR", "DEPTH_SENSOR"]

# evaluation
VIDEO_OPTION: [] # ["disk"]
TENSORBOARD_DIR: "tb"
VIDEO_DIR: "video_dir"
TEST_EPISODE_COUNT: 1000
EVAL_LOAD_LAST_CHECKPOINT: True
EVAL_CKPT_PATH_DIR: "data/orangedev_checkpoints"

TRAIN_W_REAL_IMAGES: False

EVAL_W_REAL_IMAGES: False

REAL_IMAGES_PATH: "data/real_images/orangedev"

SIM_2_REAL: False #use cycleGAN to transfer virtual to real images?

RL:
  SUCCESS_REWARD: 2.5
  COLLISION_REWARD: -1.0
  COLLITION_DISTANCE: 0.0
  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 2
    num_mini_batch: 4 #4
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 2.5e-4
    eps: 1e-5
    max_grad_norm: 0.2
    num_steps: 128
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50 # 50

    use_normalized_advantage: False

    hidden_size: 512

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: GLOO
    # Visual encoder backbone
    pretrained_weights: data/orangedev_checkpoints/ckpt.48.pth #data/ddppo-models/gibson-2plus-mp3d-train-val-test-se-resneXt50-rgb.pth
    # Initialize with pretrained weights
    pretrained: True #True
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: True
    # Whether or not to reset the critic linear layer
    reset_critic: False

    # Model parameters
    backbone: se_resneXt50
    rnn_type: LSTM
    num_recurrent_layers: 2
